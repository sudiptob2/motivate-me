{"version":3,"sources":["audio.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","advice","setAdvice","doPlay","setDoPlay","backgroundImg","fetchAdvice","axios","get","then","response","data","slip","console","log","length","catch","error","useEffect","fetchId","setInterval","className","style","background","src","soundfile","autoPlay","textAsButton","displayText","text","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,mC,oOC2D5BC,EArDH,WAAO,IAAD,EACcC,mBACxB,wCAFU,mBACPC,EADO,KACCC,EADD,OAIcF,oBAAS,GAJvB,mBAIPG,EAJO,KAICC,EAJD,OAK4BJ,mBACtC,gHANU,mBAKPK,EALO,KAWRC,GAXQ,KAWM,WAChBC,IACKC,IAAI,qCACJC,MAAK,SAACC,GAAc,IACTT,EAAWS,EAASC,KAAKC,KAAzBX,OACRC,EAAUD,GACVY,QAAQC,IAAIb,EAAOc,WAEtBC,OAAM,SAACC,GACJJ,QAAQC,IAAIG,QAUxB,OANAC,qBAAU,WACNL,QAAQC,IAAI,uBACZ,IAAIK,EAAUC,YAAYd,EAAa,IAAML,EAAOc,QACpDF,QAAQC,IAAIK,KACb,IAGC,yBACIE,UAAU,MACVC,MAAO,CACHC,WAAW,OAAD,OAASlB,EAAT,OAGbF,GAAU,2BAAOqB,IAAKC,IAAWC,UAAQ,IAC1C,yBAAKL,UAAU,QACX,wBAAIA,UAAU,UAAUpB,GACxB,kBAAC,IAAD,CACI0B,cAAc,EACdC,YAAY,UACZC,KAAM5B,IAEV,4BAAQ6B,QArCF,WACd1B,GAAWD,KAqCEA,EAAS,cAAgB,iBCxC1B4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAM6B,c","file":"static/js/main.73707fa8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/audio.64370cf8.mp3\";","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Speech from \"react-speech\";\nimport soundfile from \"./audio.mp3\";\n\nconst App = () => {\n    const [advice, setAdvice] = useState(\n        \"Quality is not an act, it is a habit\"\n    );\n    const [doPlay, setDoPlay] = useState(false);\n    const [backgroundImg, setBackgroundImg] = useState(\n        \"https://images.pexels.com/photos/902756/pexels-photo-902756.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\"\n    );\n    const playMusic = () => {\n        setDoPlay(!doPlay);\n    };\n    const fetchAdvice = () => {\n        axios\n            .get(\"https://api.adviceslip.com/advice\")\n            .then((response) => {\n                const { advice } = response.data.slip;\n                setAdvice(advice);\n                console.log(advice.length);\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    };\n\n    useEffect(() => {\n        console.log(\"component did mount\");\n        let fetchId = setInterval(fetchAdvice, 200 * advice.length);\n        console.log(fetchId);\n    }, []);\n\n    return (\n        <div\n            className=\"app\"\n            style={{\n                background: `url(${backgroundImg})`,\n            }}\n        >\n            {doPlay && <audio src={soundfile} autoPlay />}\n            <div className=\"card\">\n                <h1 className=\"header\">{advice}</h1>\n                <Speech\n                    textAsButton={true}\n                    displayText=\"Narrate\"\n                    text={advice}\n                />\n                <button onClick={playMusic}>\n                    {doPlay ? \"Pause Music\" : \"Play Music\"}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}